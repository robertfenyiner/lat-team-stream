worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

# RTMP server (listens on 1935)
rtmp {
    server {
        listen 1935;
        chunk_size 4096;
        max_connections 1000;

        application live {
            live on;
            record off;
            
            # Allow publishing from localhost only (security)
            allow publish 127.0.0.1;
            deny publish all;
            
            # Allow playing from anywhere
            allow play all;
            
            # HLS output directory (use a persistent path, not /tmp)
            hls on;
            hls_path /var/hls;
            # Optimized settings for better streaming
            hls_fragment 4;
            hls_playlist_length 30;
            hls_continuous on;
            hls_cleanup on;
            hls_nested on;
            hls_variant _720p BANDWIDTH=2048000 RESOLUTION=1280x720;
            hls_variant _480p BANDWIDTH=1024000 RESOLUTION=854x480;
            
            # DASH support (optional)
            dash on;
            dash_path /var/dash;
            dash_fragment 4;
            dash_playlist_length 30;
            dash_nested on;
            dash_cleanup on;
        }
        
        # Multiple stream support
        application multi {
            live on;
            record off;
            
            allow publish 127.0.0.1;
            deny publish all;
            allow play all;
            
            # Multiple HLS outputs for different sources
            hls on;
            hls_path /var/hls;
            hls_fragment 4;
            hls_playlist_length 30;
            hls_nested on;
            hls_cleanup on;
        }
    }
}

# HTTP server to serve HLS fragments and web interface
http {
    include       mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile       on;
    tcp_nopush     on;
    tcp_nodelay    on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    server {
        listen 8080;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Serve HLS files from /var/hls
        location /hls/ {
            # MIME types for HLS
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            # Use alias so that /hls/ maps to /var/hls/
            alias /var/hls/;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            add_header Access-Control-Allow-Headers "Range";
            # disable gzip for HLS
            gzip off;
        }
        
        # Serve DASH files from /var/dash
        location /dash/ {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
            alias /var/dash/;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin "*";
            add_header Access-Control-Allow-Methods "GET, HEAD, OPTIONS";
            add_header Access-Control-Allow-Headers "Range";
            gzip off;
        }
        
        # Serve web interface
        location / {
            root /var/www/stream;
            index index.html;
            try_files $uri $uri/ =404;
        }
        
        # API endpoint for stream management
        location /api/ {
            # Future: API for managing streams, playlists, etc.
            return 501;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Optional: an internal location you can use with X-Accel-Redirect from your app (Laravel)
        # to enforce auth before serving the HLS files. Example flow:
        # 1) Browser requests /stream/stream.m3u8 on your app
        # 2) Laravel checks session/permissions and then responds with header:
        #    X-Accel-Redirect: /internal_hls/stream/stream.m3u8
        # 3) Nginx internal location serves the file from /var/hls
        #
        #location /internal_hls/ {
        #    internal;
        #    alias /var/hls/;
        #    add_header Cache-Control no-cache;
        #}
    }
}
